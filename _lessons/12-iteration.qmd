---
title: Iteration with for loops and map functions
embed-resources: true
---

```{r, include = FALSE}
# Silently load in the data so the rest of the lesson works
gapminder <- read.csv("data/gapminder_data.csv")
# Silently set seed for random number generation, so we don't have to explain it
set.seed(10)
```


```{r}
gapminder <- read.csv("data/gapminder_data.csv")
```

## Repeating operations

If you want to iterate over a set of values, when the order of iteration is important, and perform the
same operation on each, one way to do this is using a `for()` loop.

In general, the advice of many `R` users would be to learn about
`for()` loops, but to avoid using `for()` loops unless the order of iteration is
important: i.e. the calculation at each iteration depends on the results of
previous iterations. 

The basic structure of a `for()` loop is:

```{r}
#| eval = FALSE
for (iterator in set of values) {
  do a thing
}
```

For example:

```{r}
for (i in 1:10) {
  print(i)
}
```


```{r}
x <- c()
for (i in 1:10) {
  x[i] <- exp(i)
}
x
```

The `1:10` bit creates a vector on the fly; you can iterate over any other vector as well.




<!-- We can use a `for()` loop nested within another `for()` loop to iterate over two things at -->
<!-- once. -->

<!-- ```{r} -->
<!-- for (i in 1:5) { -->
<!--   for (j in c('a', 'b', 'c', 'd', 'e')) { -->
<!--     print(paste(i,j)) -->
<!--   } -->
<!-- } -->
<!-- ``` -->

<!-- We notice in the output that when the first index (`i`) is set to 1, the second -->
<!-- index (`j`) iterates through its full set of indices. Once the indices of `j` -->
<!-- have been iterated through, then `i` is incremented. This process continues -->
<!-- until the last index has been used for each `for()` loop. -->

<!-- Rather than printing the results, we could write the loop output to a new object. -->

<!-- ```{r} -->
<!-- output_vector <- c() -->
<!-- for (i in 1:5) { -->
<!--   for (j in c('a', 'b', 'c', 'd', 'e')) { -->
<!--     temp_output <- paste(i, j) -->
<!--     output_vector <- c(output_vector, temp_output) -->
<!--   } -->
<!-- } -->
<!-- output_vector -->
<!-- ``` -->

<!-- This approach can be useful, but 'growing your results' (building -->
<!-- the result object incrementally) is computationally inefficient, so avoid -->
<!-- it when you are iterating through a lot of values. -->

<!-- ::: {.callout-tip} -->
<!-- ## Tip: don't grow your results -->

<!-- One of the biggest things that trips up novices and -->
<!-- experienced R users alike, is building a results object -->
<!-- (vector, list, matrix, data frame) as your for loop progresses. -->
<!-- Computers are very bad at handling this, so your calculations -->
<!-- can very quickly slow to a crawl. It's much better to define -->
<!-- an empty results object before hand of appropriate dimensions, rather -->
<!-- than initializing an empty object without dimensions. -->
<!-- So if you know the end result will be stored in a matrix like above, -->
<!-- create an empty matrix with 5 row and 5 columns, then at each iteration -->
<!-- store the results in the appropriate location. -->
<!-- ::: -->




<!-- A better way is to define your (empty) output object before filling in the values. -->
<!-- For this example, it looks more involved, but is still more efficient. -->

<!-- ```{r} -->
<!-- output_matrix <- matrix(nrow = 5, ncol = 5) -->
<!-- j_vector <- c('a', 'b', 'c', 'd', 'e') -->
<!-- for (i in 1:5) { -->
<!--   for (j in 1:5) { -->
<!--     temp_j_value <- j_vector[j] -->
<!--     temp_output <- paste(i, temp_j_value) -->
<!--     output_matrix[i, j] <- temp_output -->
<!--   } -->
<!-- } -->
<!-- output_vector2 <- as.vector(output_matrix) -->
<!-- output_vector2 -->
<!-- ``` -->


<!-- ::: {.callout-tip} -->

<!-- ## Tip: While loops -->
<!-- Sometimes you will find yourself needing to repeat an operation as long as a certain -->
<!-- condition is met. You can do this with a `while()` loop. -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- while(this condition is true){ -->
<!--  do a thing -->
<!-- } -->
<!-- ``` -->

<!-- R will interpret a condition being met as "TRUE". -->
<!-- As an example, here's a while loop -->
<!-- that generates random numbers from a uniform distribution (the `runif()` function) -->
<!-- between 0 and 1 until it gets one that's less than 0.1. -->

<!-- ```{r} -->
<!-- z <- 1 -->
<!-- while(z > 0.1){ -->
<!--  z <- runif(1) -->
<!--  cat(z, "\n") -->
<!-- } -->
<!-- ``` -->

<!-- while()` loops will not always be appropriate. You have to be particularly careful -->
<!-- that you don't end up stuck in an infinite loop because your condition is always met and hence the while statement never terminates. -->
<!-- ::: -->

For loops are common in programming in general, `for` loops are rarely used in R, primarily due to their computational inefficiency.



Instead, a much more efficient method for iterating in R is using the `map()` functions from the purrr R package. To load the purrr R package, you need to run the following code (if the purrr package is not installed, you will need to run the commented `install.packages()` line)

```{r}
# install.packages("purrr")
library(purrr)
```


The first argument from the `map()` function is the object that we want to iterate over. The second argument is the function that we want to apply at each iteration. The output of the `map()` function is always a list.

For example, the following code will apply the `exp()` function to each entry in the vector `1:10` and return the results in a list:

```{r}
map(1:10, exp)
```

Since lists are unwieldy, there are several versions of the `map()` function, such as `map_dbl()` that specifies the type of your output. For instance, if you want your output to be a numeric "double" vector, you can use `map_dbl()`:

```{r}
map_dbl(1:10, exp)
```

and if you want it to be a character vector, you can use `map_chr()`:

```{r}
map_chr(gapminder, class)
```

Here, recall that the gapminder data frame is a list, and the `map_` function is iterating over the elements of the list, which in this case is the columns.

Note that the output of the function you are applying must match the `map_` function that you use, else you will get an error:

```{r}
#| error: true
map_dbl(1:10, class)
```

The true power from the map functions really comes once you learn how to write your own functions (see future lesson on functions).


::: {.callout}
## Challenge 2 (advanced)

For each numeric column in the gapminder dataset, print the number of unique entries using the `length()` and `unique()` function. 

Do this in two different ways: using a `for` loop and a `map()` function.


::: {.callout collapse=true}
## Solution to Challenge 2

```{r} 
numeric_columns <- is.numeric(gapminder)
for (i in 1:ncol(gapminder)) {
  print(mean(gapminder[, i]))
}
```
```{r}
map(gapminder, mean)
```

:::
:::

::: {.callout}
## Challenge 4

Modify the script from Challenge 3 to loop over each
country. This time print out whether the life expectancy is
smaller than 50, between 50 and 70, or greater than 70.

::: {.callout collapse=true}
## Solution to Challenge 4

We modify our solution to Challenge 3 by now adding two thresholds, `lowerThreshold` and `upperThreshold` and extending our if-else statements:
```{r 07-chall-04-sol, eval=FALSE}
lowerThreshold <- 50
upperThreshold <- 70
for (iCountry in unique(gapminder$country)) {
   tmp <- mean(gapminder[gapminder$country == iCountry, "lifeExp"])
   if(tmp < lowerThreshold) {
       cat("Average Life Expectancy in", iCountry, "is less than", lowerThreshold, "\n")
   } else if(tmp > lowerThreshold && tmp < upperThreshold) {
       cat("Average Life Expectancy in", iCountry, "is between", lowerThreshold, "and", upperThreshold, "\n")
   } else {
       cat("Average Life Expectancy in", iCountry, "is greater than", upperThreshold, "\n")
   }
   rm(tmp)
}
```
:::
:::

::: {.callout}
## Challenge 5 - Advanced

Write a script that loops over each country in the `gapminder` dataset,
tests whether the country starts with a 'B', and graphs life expectancy
against time as a line graph if the mean life expectancy is under 50 years.

::: {.callout collapse=true}
## Solution for Challenge 5

We will use the `grep()` command that was introduced in the Unix Shell lesson to find countries that start with "B."
Lets understand how to do this first.
Following from the Unix shell section we may be tempted to try the following

```{r 07-chall-05-sol-a, eval=FALSE}
grep("^B", unique(gapminder$country))
```

But when we evaluate this command it returns the indices of the factor variable `country` that start with "B."
To get the values, we must add the `value = TRUE` option to the `grep()` command:

```{r 07-chall-05-sol-b}
#| eval: false
grep("^B", unique(gapminder$country), value = TRUE)
```

We will now store these countries in a variable called candidateCountries, and then loop over each entry in the variable.
Inside the loop, we evaluate the average life expectancy for each country, and if the average life expectancy is less than 50 we use base-plot to plot the evolution of average life expectancy using `with()` and `subset()`:

```{r 07-chall-05-sol-c}
#| eval: false
thresholdValue <- 50
candidateCountries <- grep("^B", unique(gapminder$country), value = TRUE)
for (iCountry in candidateCountries) {
   tmp <- mean(gapminder[gapminder$country == iCountry, "lifeExp"])
   if (tmp < thresholdValue) {
       cat("Average Life Expectancy in", iCountry, "is less than", thresholdValue, "plotting life expectancy graph... \n")
       with(subset(gapminder, country == iCountry),
               plot(year, lifeExp,
                    type = "o",
                    main = paste("Life Expectancy in", iCountry, "over time"),
                    ylab = "Life Expectancy",
                    xlab = "Year"
                    ) # end plot
            ) # end with
   } # end if
   rm(tmp)
} # end for loop
```
:::
:::