---
title: Iteration with for loops and map functions
embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r, include = FALSE}
# Silently load in the data so the rest of the lesson works
gapminder <- read.csv("data/gapminder_data.csv")
# Silently set seed for random number generation, so we don't have to explain it
set.seed(10)
```


```{r}
library(tidyverse)
gapminder <- read.csv("data/gapminder_data.csv")
```

## "For" loops for repeating operations

If you want to iterate over a set of values, when the order of iteration is important, and perform the same operation on each, one way to do this is using a `for()` loop.

In general, the advice of many `R` users would be to learn about
`for()` loops, but to avoid using `for()` loops unless the order of iteration is
important: i.e. the calculation at each iteration depends on the results of
previous iterations. 

The basic structure of a `for()` loop is:

```{r}
#| eval = FALSE
for (iterator in set of values) {
  do a thing
}
```

For example:

```{r}
for (i in 1:10) {
  print(i)
}
```


To save the output of a computation in a vector, you need to first create an empty vector (e.g., `x <- c()`) and sequentially fill the values of this vector in each iteration of the for loop.

```{r}
result <- c()
for (i in 1:10) {
  result[i] <- (1 + i)^{10}
}
result
```





<!-- We can use a `for()` loop nested within another `for()` loop to iterate over two things at -->
<!-- once. -->

<!-- ```{r} -->
<!-- for (i in 1:5) { -->
<!--   for (j in c('a', 'b', 'c', 'd', 'e')) { -->
<!--     print(paste(i,j)) -->
<!--   } -->
<!-- } -->
<!-- ``` -->

<!-- We notice in the output that when the first index (`i`) is set to 1, the second -->
<!-- index (`j`) iterates through its full set of indices. Once the indices of `j` -->
<!-- have been iterated through, then `i` is incremented. This process continues -->
<!-- until the last index has been used for each `for()` loop. -->

<!-- Rather than printing the results, we could write the loop output to a new object. -->

<!-- ```{r} -->
<!-- output_vector <- c() -->
<!-- for (i in 1:5) { -->
<!--   for (j in c('a', 'b', 'c', 'd', 'e')) { -->
<!--     temp_output <- paste(i, j) -->
<!--     output_vector <- c(output_vector, temp_output) -->
<!--   } -->
<!-- } -->
<!-- output_vector -->
<!-- ``` -->

<!-- This approach can be useful, but 'growing your results' (building -->
<!-- the result object incrementally) is computationally inefficient, so avoid -->
<!-- it when you are iterating through a lot of values. -->

<!-- ::: {.callout-tip} -->
<!-- ## Tip: don't grow your results -->

<!-- One of the biggest things that trips up novices and -->
<!-- experienced R users alike, is building a results object -->
<!-- (vector, list, matrix, data frame) as your for loop progresses. -->
<!-- Computers are very bad at handling this, so your calculations -->
<!-- can very quickly slow to a crawl. It's much better to define -->
<!-- an empty results object before hand of appropriate dimensions, rather -->
<!-- than initializing an empty object without dimensions. -->
<!-- So if you know the end result will be stored in a matrix like above, -->
<!-- create an empty matrix with 5 row and 5 columns, then at each iteration -->
<!-- store the results in the appropriate location. -->
<!-- ::: -->




<!-- A better way is to define your (empty) output object before filling in the values. -->
<!-- For this example, it looks more involved, but is still more efficient. -->

<!-- ```{r} -->
<!-- output_matrix <- matrix(nrow = 5, ncol = 5) -->
<!-- j_vector <- c('a', 'b', 'c', 'd', 'e') -->
<!-- for (i in 1:5) { -->
<!--   for (j in 1:5) { -->
<!--     temp_j_value <- j_vector[j] -->
<!--     temp_output <- paste(i, temp_j_value) -->
<!--     output_matrix[i, j] <- temp_output -->
<!--   } -->
<!-- } -->
<!-- output_vector2 <- as.vector(output_matrix) -->
<!-- output_vector2 -->
<!-- ``` -->


<!-- ::: {.callout-tip} -->

<!-- ## Tip: While loops -->
<!-- Sometimes you will find yourself needing to repeat an operation as long as a certain -->
<!-- condition is met. You can do this with a `while()` loop. -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- while(this condition is true){ -->
<!--  do a thing -->
<!-- } -->
<!-- ``` -->

<!-- R will interpret a condition being met as "TRUE". -->
<!-- As an example, here's a while loop -->
<!-- that generates random numbers from a uniform distribution (the `runif()` function) -->
<!-- between 0 and 1 until it gets one that's less than 0.1. -->

<!-- ```{r} -->
<!-- z <- 1 -->
<!-- while(z > 0.1){ -->
<!--  z <- runif(1) -->
<!--  cat(z, "\n") -->
<!-- } -->
<!-- ``` -->

<!-- while()` loops will not always be appropriate. You have to be particularly careful -->
<!-- that you don't end up stuck in an infinite loop because your condition is always met and hence the while statement never terminates. -->
<!-- ::: -->

For loops are common in programming in general, but `for` loops are rarely used in R, primarily due to their computational inefficiency.



Instead, a much more efficient method for iterating in R is using the `map()` functions from the purrr R package. To load the purrr R package, you need to run the following code (if the purrr package is not installed, you will need to run the commented `install.packages()` line)

```{r}
# install.packages("purrr")
library(purrr)
```


The first argument from the `map()` function is the object whose elements we want to iterate over. The second argument is the function that we want to apply at each iteration. 

The output of the `map()` function is always a *list*.


For example, the following code will apply the `exp()` function to each element in the vector `1:10` and return the results in a list:

```{r}
map(1:10, exp)
```



While the list output format offers maximal flexibility, we typically want to create a vector or a data frame. This can be done using alternative versions of the `map()` function, such as `map_dbl()` that specifies the type of your output in its name. 

For instance, if you want your output to be a numeric "double" vector, you can use `map_dbl()`:

```{r}
map_dbl(1:10, exp)
```

and if you want it to be a character vector, you can use `map_chr()`:

```{r}
map_chr(gapminder, class)
```

Here, recall that the gapminder data frame is a list, and the `map_` function is iterating over the elements of the list, which in this case is the columns.



Note that the output of the function you are applying must match the `map_` function that you use, else you will get an error:

```{r}
#| error: true
map_dbl(1:10, class)
```

The true power from the map functions really comes once you learn how to write your own functions.


For example, we could conduct the following transformation to each entry in `1:10`:

```{r}
map_dbl(1:10, function(x) (x + 1)^10)
```




An even more compact way of writing a function with one argument is using the `~.` anonymous function shorthand:

```{r}
map_dbl(1:10, ~(. + 1)^10)
```

This shorthand involves:

- Replacing `function(x)` with `~`

- Replacing the argument in the body of the function with `.`









The `map_df()` function will return a data frame (but requires that the function being applied outputs a data frame).


As an example, the following code takes each entry in the vector `c(1, 4, 7)`, and adds 10 to it, and returns a two-column data frame containing the old number and new number:

```{r}
map_df(c(1, 4, 7), function(.x) {
  return(data.frame(old_number = .x, 
                    new_number = .x + 10))
})
```

To help see how this works, set `.x` to be one of the values in the vector and run the body of the code:

```{r}
.x <- 1
data.frame(old_number = .x, 
           new_number = .x + 10)
```




As another example, the following code takes the gapminder dataset selects the pop, gdpPercap, and lifeExp columns and then computes a data frame for each column/variable containing the mean and sd.


```{r}
gapminder |>
  select(pop, gdpPercap, lifeExp) |>
  map_df(function(.x) data.frame(mean = mean(.x),
                                 sd = sd(.x)),
         .id = "variable")
```


To figure out what is happening here, `map_df()` is computing the following for each variable:

```{r}
.x <- gapminder$pop
data.frame(mean = mean(.x), 
           sd = sd(.x))
```

and is then pasting the results for each variable together into a single data frame.











::: {.callout}
## Challenge 1

For each column in the gapminder dataset, compute the number of unique entries using the `n_distinct()` function. Make sure the output of your code is a numeric vector.

Do this in two different ways: using a `for` loop and a `map_dbl()` function.

Hint: `n_distinct()` is a dplyr function which counts the number of unique/distinct values in a vector. Try `n_distinct(c(1, 1, 4, 4, 4, 4, 1, 3))` as an example of its usage



::: {.callout collapse=true}
## Solution to Challenge 1

```{r} 
unique_gapminder <- c()
for (i in 1:ncol(gapminder)) {
  unique_gapminder[i] <- n_distinct(gapminder[, i])
}
unique_gapminder
```


```{r}
map_dbl(gapminder, ~n_distinct(.))
```

:::
:::






::: {.callout}
## Challenge 2

Use `map_df()` to compute the number of distinct values and the class of each variable in the gapminder dataset and store them in a data frame.

The output of your code should look like this:

```{verbatim}
   variable n_distinct     class
1   country        142 character
2      year         12   integer
3       pop       1704   numeric
4 continent          5 character
5   lifeExp       1626   numeric
6 gdpPercap       1704   numeric
```

Hint: the argument `.id = "variable"` variable of `map_df()` can be used to add the `variable` column automatically based on the gapminder column names.


::: {.callout collapse=true}
## Solution to Challenge 2

```{r} 
gapminder %>% map_df(function(.x) {
  data.frame(n_distinct = n_distinct(.x),
             class = class(.x))
  }, .id = "variable")
```

:::
:::




