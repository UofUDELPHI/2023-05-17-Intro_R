---
title: "Reshaping data frames with tidyr"
embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false

# Silently load in the data so the rest of the lesson works
gapminder <- read.csv("data/gapminder_data.csv", header = TRUE, stringsAsFactors = FALSE)

# To create gapminder_wide.csv:
# library("dplyr")
# library("tidyr")
#
# #transform the data to the wide format
# gap_wide <- gapminder |>
#     pivot_longer(cols = c(-continent,-country,-year),names_to = "obs_type",values_to = "obs_values") |>
#     unite(ID_var,continent,country,sep = "_") |>
#     unite(var_names,obs_type,year,sep = "_") |>
#     pivot_wider(names_from = var_names,values_from = obs_values) |>
#     separate(ID_var,into = c('continent','country'),sep = '_')
#
# #write our the .csv so students can use it
# write.csv(gap_wide,"data/gapminder_wide.csv",row.names = FALSE)

#load the "student" data
gapminder_long <- read.csv("data/gapminder_long.csv")
```

Researchers often want to reshape their data frames from 'wide' to 'longer' layouts, or vice-versa. 

In the purely 'long' (or 'longest') format, you usually have 1 column for the observed variable and the other columns are ID variables.

For the 'wide' format each row is often a site/subject/patient and you have multiple observation variables containing the same type of data. These can be either repeated observations over time or observations of multiple variables (or a mix of both). You may find data input may be simpler or some other applications may prefer the 'wide' format. 

However, many of `R`'s functions have been designed assuming you have a 'tidy' formatted dataset, in which 

- Each row contains all the data for a single observational unit

- Each column is a distinct type of measurement

The "wide"-labeled format in the example below is actually tidy:

![Diagram illustrating the difference between a tidy versus long layout of a data frame](figs/14-tidyr-fig1.png)


## Getting started

The tools we will be using in this lesson come from the "tidyr" package, which is part of the tidyverse suite:

Load the tidyverse package

```{r,message=FALSE}
library(tidyverse)
```

First, let's look at the structure of our original gapminder data frame:

```{r}
head(gapminder)
```





::: {.callout}
## Challenge 1
Is gapminder in a purely long format, a purely wide format, or is it in a tidy format?

::: {.callout collapse=true}
## Solution to Challenge 1

The original gapminder data frame is in a tidy format.
:::
:::



A long format of gapminder would instead look like this:


```{r}
#| echo: false
head(gapminder_long, 10)
```


Can you identify the difference?

**Note:** Some ggplots are easier to create using long-format data, but generally you want your data to be in a tidy format.


## Pivoting longer with pivot_longer()

To convert the original gapminder data to the longer format, we will use the `pivot_longer()` function. 

`pivot_longer()` makes datasets longer by increasing the number of rows and decreasing the number of columns, or 'lengthening' your observation variables into a single variable.


![Diagram illustrating how pivot longer reorganizes a data frame from a wide to long format](figs/14-tidyr-fig3.png)


```{r}
gapminder_long <- gapminder |>
  pivot_longer(cols = c(pop, lifeExp, gdpPercap),
               names_to = "variable", 
               values_to = "value")
gapminder_long
```


We first provide to `pivot_longer()` a vector of column names that will be
used to pivot into a longer format.



Note: `pivot_longer()` also allows the alternative syntax of using the `-` symbol to identify which variables are not to be pivoted (i.e. ID variables).

The next arguments to `pivot_longer()` are `names_to` for naming the column that will contain the variable names (`variable`) and `values_to` for naming the column that will contain the values of each variable. We supply these new column names as strings.



Typically, long-format is useful when you want to plot multiple variables on the same plot, e.g., a line plot of each of the three variables (pop, lifeExp, and gdpPercap) over time.

```{r}
gapminder_long |>
  # filter to just the data for the US
  filter(country == "United States") |>
  # scale each variable's value to a common scale between 0 (min) and 1
  group_by(variable) |>
  mutate(value_scaled = value / sd(value)) |>
  ungroup() |>
  # plot a line plot of each variable over time
  ggplot() +
  geom_line(aes(x = year, y = value_scaled, color = variable))
```




::: {.callout}
## Challenge 2

Using `gapminder_long`, calculate the mean life expectancy, population, and gdpPercap for each continent.

*Hint:** use the `group_by()` and `summarize()` functions we learned in the `dplyr` lesson

::: {.callout collapse=true}
## Solution to Challenge 2

```{r}
gapminder_long |> 
  group_by(continent, variable) |>
  summarize(means = mean(value))
```
:::
:::





## Pivoting wider with pivot_wider()

Let's convert our long format data back to the (wider) tidy format using `pivot_wider()`.


`pivot_wider()` is the opposite of `pivot_longer()`, making a dataset wider by increasing the number of columns and decreasing the number of rows. 

The `pivot_wider()` function takes `names_from` and `values_from` arguments.

To `names_from` we supply the column name whose contents will be pivoted into new output columns in the widened data frame. The corresponding values will be added from the column named in the `values_from` argument.

```{r}
gapminder_wider <- gapminder_long |>
  pivot_wider(names_from = variable, values_from = value)
head(gapminder_wider)
dim(gapminder_wider)
```

Which is the same as our original gapminder data (but with some of the columns in a different order)

```{r}
head(gapminder)
dim(gapminder)
```





::: {.callout}
## Challenge 3

Is the `mtcars` dataset in a tidy format?

```{r}
mtcars_data <- read.csv("data/mtcars.csv") 
```

Convert `mtcars` to a longer format using `pivot_longer()` (Hint: the `car` variable is an ID variable and should not be pivoted). 

Use `pivot_wider()` to convert your result back to the original `mtcars` dataset.

::: {.callout collapse=true}
## Solution to Challenge 3

```{r}
mtcars_long <- mtcars_data |>
  pivot_longer(-car)
mtcars_long

mtcars_wide <- mtcars_long |>
  pivot_wider(names_from = "name", values_from = "value")
mtcars_wide
```
:::
:::




## Other great resources

* [R for Data Science](http://r4ds.had.co.nz/index.html)
* [Data Wrangling Cheat sheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)
* [Introduction to tidyr](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)
