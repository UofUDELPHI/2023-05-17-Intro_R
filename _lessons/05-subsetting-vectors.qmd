---
title: "Subsetting vectors"
output: html
embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
# We don't want factors
options(stringsAsFactors = FALSE)

## Save the data. Do not create factors from strings (explicit argument
## only necessary for R < 4.0.0)
cats_orig <- data.frame(coat = c("calico", "black", "tabby"),
                   weight = c(2.1, 5.0, 3.2),
                   likes_string = c(1, 0, 1),
                   stringsAsFactors = FALSE)
cats_bad <- data.frame(coat = c("calico", "black", "tabby", "tabby"),
                   weight = c(2.1, 5.0, 3.2, '2.3 or 2.4'),
                   likes_string = c(1, 0, 1, 1), 
                   stringsAsFactors = FALSE)
cats <- cats_orig
```


## Subsetting vectors


We can extract individual elements of a vector by using the square bracket notation:

```{r}
sequence_example <- 20:25
first_element <- sequence_example[1]
first_element
```

To change a single element, use the bracket on the other side of the arrow:

```{r}
sequence_example[1] <- 30
sequence_example
```

Let's define a new vector, `x`:

```{r}
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
x
```


So now that we've created a toy vector to play with, how do we get at its
contents?

### Accessing elements using their indices

To extract elements of a vector we can give their corresponding index, starting
from one:

```{r}
x[1]
```

```{r}
x[4]
```

The square brackets operator is a function. For vectors, it means "get me the nth element".

We can ask for multiple elements at once by providing a vector of indices:

```{r}
x[c(1, 3)]
```

Or "slices" of the vector using a sequential integer vector index:

```{r}
x[1:4]
```

Recall that the `:` operator creates a sequence of numbers from the left element to the right.
```{r}
1:4
c(1, 2, 3, 4)
```


We can ask for the same element multiple times:

```{r}
x[c(1, 1, 3)]
```

If we ask for an index beyond the length of the vector, R will return a missing value:
```{r}
x[6]
```

This is a vector of length one containing an `NA`, whose name is also `NA`.

If we ask for the 0th element, we get an empty vector:

```{r}
x[0]
```

::: {.callout-tip}
## Vector numbering in R starts at 1

In many programming languages (C and Python, for example), the first
element of a vector has an index of 0. In R, the first element is 1.
:::

### Skipping and removing elements

If we use a negative number as the index of a vector, R will return
every element *except* for the one specified:

```{r}
x[-2]
```

We can skip multiple elements:

```{r}
x[c(-1, -5)]  # or x[-c(1,5)]
```

::: {.callout-tip}

### Order of operations


A common trip up for novices occurs when trying to skip
slices of a vector. It's natural to try to negate a
sequence like so:

```{r, error=TRUE, eval=FALSE}
x[-1:3]
```

This gives a somewhat cryptic error:

```{r, error=TRUE, echo=FALSE}
x[-1:3]
```

But remember the order of operations. `:` is really a function.
It takes its first argument as -1, and its second as 3,
so generates the sequence of numbers: `c(-1, 0, 1, 2, 3)`.
The correct solution is to wrap that function call in brackets, so
that the `-` operator applies to the result:

```{r}
x[-(1:3)]
```
:::


To remove elements from a vector, we need to re-assign the variable to our result:

```{r}
x <- x[-4]
x
```

::: {.callout}
## Challenge 1

Given the following vector:
```{r}
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
x
```

Come up with at least 2 different commands that will produce the following output:

```{r, echo=FALSE}
x[2:4]
```

After you find 2 different commands, compare notes with your neighbour. Did you have different strategies?

::: {.callout collapse=true}
## Solution to challenge 1

```{r}
x[2:4]
```

```{r}
x[-c(1, 5)]
```

```{r}
x[c(2, 3, 4)]
```

:::

:::



::: {.callout}
## Challenge 2

Start by making a vector with the numbers 5 through 26. Then:

- Print out the first three entries of the vector

- Print out the fourth entry of the vector

- Multiply the vector by 2.

::: {.callout collapse=true}

## Solution to Challenge 2

```{r}
x <- 5:26
head(x, 3)
x[4]
x * 2
```
:::
:::



## Names

With names, we can give meaning to elements. It is the first time that we do not
only have the **data**, but also explaining information. It is *metadata*
that can be stuck to the object like a label. In R, this is called an
**attribute**. Some attributes enable us to do more with our
object, for example, like here, accessing an element by a self-defined name.

### Accessing vectors by name

Each element of a vector can be given a name:

```{r}
pizza_price <- c(pizzasubito = 5.64, pizzafresh = 6.60, callapizza = 4.50)
```

To retrieve a specific named entry from a vector, we can use the square bracket notation:

```{r}
pizza_price["pizzasubito"]
```

which is equivalent to extracting the first entry of the vector:

```{r}
pizza_price[1]
```


If you want to extract just the names of an object, use the `names()` function:

```{r}
names(pizza_price)
```

We have seen how to access and change single elements of a vector. The same is
possible for names:

```{r}
names(pizza_price)[3]
names(pizza_price)[3] <- "call-a-pizza"
pizza_price
```



::: {.callout}
## Challenge 3

Define the following vector, `y`, and extract the "a" and "c" entries:

```{r}
#| echo: false
y <- c(a = 5.4, b = 6.2, c = 7.1, d = 4.8, e = 7.5) # we can name a vector 'on the fly'
```

```{r}
y
```



::: {.callout collapse=true}
## Solution to Challenge 3
```{r}
y <- c(a = 5.4, b = 6.2, c = 7.1, d = 4.8, e = 7.5) # we can name a vector 'on the fly'
y[c("a", "c")]
```



This is usually a much more reliable way to subset objects: the
position of various elements can often change when chaining together
subsetting operations, but the names will always remain the same!

:::
:::

::: {.callout}
## Challenge 4

What is the data type of the names of `pizza_price`? You can find out 
 using the `str()` or `class()` functions.


::: {.callout collapse=true}
## Solution to Challenge 4

You get the names of an object by wrapping the object name inside
`names(...)`. Similarly, you get the data type of the names by again 
wrapping the whole code in `class(...)`:

```{r}
class(names(pizza_price))
```

alternatively, use a new variable if this is easier for you to read: 

```{r}
names <- names(pizza_price)
class(names)
```
:::
:::

::: {.callout}

## Challenge 5

Instead of just changing the names of each element of a vector individually, you can
also set all names of an object by writing code like (replace ALL CAPS text):

```{r}
#| eval: false
names( OBJECT ) <-  CHARACTER_VECTOR
```

Create a vector that gives the number for each letter in the alphabet!

1. Generate a vector called `letter_no` with the sequence of numbers from 1
  to 26
2. R has a built-in object called `LETTERS` (type `LETTERS` in the console. It is a 26-character vector of uppercase letters from 
  A to Z. Set the names of `letter_no` to these 26 letters
3. Test yourself by calling `letter_no["B"]`, which should give you the number
  2!
  
::: {.callout collapse=true}
## Solution to Challenge 5

```{r}
letter_no <- 1:26   # or seq(1,26)
names(letter_no) <- LETTERS
letter_no["B"]
```
:::
:::



### Removing named elements

Removing named elements is a little harder. If we try to remove one named element by negating the string, R complains (slightly obscurely) that it doesn't know how to take the negative of a string:

```{r}
#| error: true
x <- c(a = 5.4, b = 6.2, c = 7.1, d = 4.8, e = 7.5) # we start again by naming a vector 'on the fly'
x[-"a"]
```

We will discuss more about subsetting in the next lesson.



<!-- However, we can use the `!=` (not-equals) operator to construct a logical vector that will do what we want: -->

<!-- ```{r} -->
<!-- x[names(x) != "a"] -->
<!-- ``` -->

<!-- Skipping multiple named indices is a little bit harder still. Suppose we want to drop the `"a"` and `"c"` elements, so we try this: -->

<!-- ```{r} -->
<!-- x[names(x) != c("a", "c")] -->
<!-- ``` -->

<!-- R did *something*, but it gave us a warning that we ought to pay attention to - and it apparently *gave us the wrong answer* (the `"c"` element is still included in the vector)! -->

<!-- So what does `!=` actually do in this case? That's an excellent question. -->


<!-- ## Recycling -->

<!-- Let's take a look at the comparison component of this code: -->

<!-- ```{r} -->
<!-- names(x) != c("a", "c") -->
<!-- ``` -->

<!-- Why does R give `TRUE` as the third element of this vector, when `names(x)[3] != "c"` is obviously false? -->
<!-- When you use `!=`, R tries to compare each element -->
<!-- of the left argument with the corresponding element of its right -->
<!-- argument. What happens when you compare vectors of different lengths? -->

<!-- ![Inequality testing](figs/06-rmd-inequality.1.png) -->

<!-- When one vector is shorter than the other, it gets *recycled*: -->

<!-- ![Inequality testing: results of recycling](figs/06-rmd-inequality.2.png) -->

<!-- In this case R **repeats** `c("a", "c")` as many times as necessary to match `names(x)`, i.e. we get `c("a","c","a","c","a")`. Since the recycled `"a"` -->
<!-- doesn't match the third element of `names(x)`, the value of `!=` is `TRUE`. -->
<!-- Because in this case the longer vector length (5) isn't a multiple of the shorter vector length (2), R printed a warning message. If we had been unlucky and `names(x)` had contained six elements, R would *silently* have done the wrong thing (i.e., not what we intended it to do). This recycling rule can can introduce hard-to-find and subtle bugs! -->

<!-- The way to get R to do what we really want (match *each* element of the left argument with *all* of the elements of the right argument) is to use the `%in%` operator. The `%in%` operator goes through each element of its left argument, in this case the names of `x`, and asks, "Does this element occur in the second argument?". Here, since we want to *exclude* values, we also need a `!` operator to change "in" to "not in": -->

<!-- ```{r} -->
<!-- x[!(names(x) %in% c("a", "c"))] -->
<!-- ``` -->


