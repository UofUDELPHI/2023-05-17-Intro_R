---
title: "Subsetting vectors"
output: html
embed-resources: true
editor_options: 
  chunk_output_type: console
---


## Subsetting vectors


We can extract individual elements of a vector by using the square bracket notation:

```{r}
# create a sequence_example vector of integers from 20 to 25
sequence_example <- 20:25
# extract the first element and store it in a variable called first_element
first_element <- sequence_example[1]
# take a look at the first_element variable
first_element
```

To change a single element, use the bracket on the other side of the arrow:

```{r}
# reassign the first element of sequence_example to 30
sequence_example[1] <- 30
# print out sequence_example
sequence_example
```
 
 
 
 
 
 



### Accessing elements using their indices

Define a new vector, `x`:

```{r}
# define a vector x containing the values 5.4, 6.2, 7.1, 4.8, and 7.5
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
# print out x
x
```



To extract elements of a vector we can give their corresponding index:

```{r}
# extract the first entry of x
x[1]
```

```{r}
# extract the fourth entry of x
x[4]
```





### Extracting multiple elements at once

We can ask for multiple elements at once by providing a *vector* of indices:

```{r}
# extract the first and third element of x using a vector created with `c()`
x[c(1, 3)]
```






Or "slices" of the vector using a sequential integer vector index:

```{r}
# extract the first to fourth element of x using a vector created with `:`
x[1:4]
```





You can ask for the same element multiple times:

```{r}
# extract the first, first and third element from x using `c()`
x[c(1, 1, 3)]
```



### Indexing out of bounds

If you ask for an index beyond the length of the vector, R will return a missing value:

```{r}
# extract the non-existent sixth element from x
x[6]
```







If you ask for the 0th element, you get an empty vector:

```{r}
# extract the 0th element from x
x[0]
```






### Removing elements

If you use a negative number as the index of a vector, R will return every element *except* for the one specified:

```{r}
# remove the second entry from x
x[-2]
```

We can remove multiple elements:

```{r}
# remove the first and fifth elements from x in two ways:
x[c(-1, -5)]  # or x[-c(1,5)]
```






### Order of operations


It's natural to try to negate a sequence like `-1:3` (this should give an error):

```{r}
#| error: true
# Try to remove the 1st-3rd elements from x using `:`
x[-1:3]
```


Why didn't this work?


```{r}
# print out the sequence of integers being used for indexing
-1:3
```




The correct solution is to wrap `1:3` in brackets, so that the `-` operator applies to the result:

```{r}
# correctly remove elements 1-3 using parentheses
x[-(1:3)]
```







Above, we have only *printed* the results to the console. 

To redefine `x`, we need to re-assign the variable to our result:

```{r}
# redefine x as x without the 4th element
x <- x[-4]
# print x
x
```

::: {.callout}
## Challenge 1

Given the following vector:
```{r}
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
x
```

Come up with at least 2 different commands that will produce the following output:

```{verbatim}
[1] 6.2 7.1 4.8
```


After you find 2 different commands, compare notes with your neighbor. Did you have different strategies?

::: {.callout collapse=true}
## Solution to challenge 1

```{r}
x[2:4]
```

```{r}
x[-c(1, 5)]
```

```{r}
x[c(2, 3, 4)]
```

:::

:::



::: {.callout}
## Challenge 2

Start by making a vector with the numbers 5 through 26. Then:

- Print out the first three entries of the vector

- Print out the fourth entry of the vector

- Multiply the vector by 2.

::: {.callout collapse=true}

## Solution to Challenge 2

```{r}
x <- 5:26
head(x, 3)
x[4]
x * 2
```
:::
:::













## Names

Each element of a vector can be given a name:

```{r}
# define a named pizza_price vector 
pizza_price <- c(pizzasubito = 5.64, pizzafresh = 6.60, callapizza = 4.50)
# look at the result
pizza_price
```




Alternatively, these names can be assigned after defining the vector:

```{r}
# define unnamed pizza price vector
pizza_price <- c(5.64, 6.60, 4.5)
# assign the names to pizza price
names(pizza_price) <- c("pizzasubito", "pizzafresh", "callapizza")
# look at the result
pizza_price
```









### Accessing vectors by name


To retrieve a named entry from a vector:

```{r}
# extract the "pizzasubito" entry from pizza_price using named indexing
pizza_price["pizzasubito"]
```

This is equivalent to extracting the first entry of the vector:

```{r}
# extract the first entry from pizza_price using numbered indexing
pizza_price[1]
```







If you want to extract just the names of an object, use the `names()` function:

```{r}
# use `names()` to print the names of pizza_price
names(pizza_price)
```








We have seen how to access and change single elements of a vector. The same is
possible for names:

```{r}
# print the third pizza_price name
names(pizza_price)[3]
# change this third name of pizza_price to "call-a-pizza"
names(pizza_price)[3] <- "call-a-pizza"
# print out the new pizza_price vector
pizza_price
```



::: {.callout}
## Challenge 3

Define the following vector, `y`, and extract the "a" and "c" entries from it:

```{verbatim}
  a   b   c   d   e 
5.4 6.2 7.1 4.8 7.5 
```



::: {.callout collapse=true}
## Solution to Challenge 3
```{r}
y <- c(a = 5.4, b = 6.2, c = 7.1, d = 4.8, e = 7.5)
y[c("a", "c")]
```

:::
:::




::: {.callout}
## Challenge 4

What is the data type of the *names* of `pizza_price`? 

::: {.callout collapse=true}
## Solution to Challenge 4

```{r}
class(names(pizza_price))
```

alternatively, use a new variable if this is easier for you to read: 

```{r}
names <- names(pizza_price)
class(names)
```
:::
:::




::: {.callout}

## Challenge 5

Instead of just changing the names of each element of a vector individually, you can
also set all names of an object by writing code like (replace <ALL CAPS> text):

```{r}
#| eval: false
names(OBJECT) <-  CHARACTER_VECTOR
```

Create a vector that gives the number for each letter in the alphabet!

1. Generate a vector called `letter_no` with the sequence of numbers from 1 to 26
2. R has a built-in object called `LETTERS` (type `LETTERS` in the console. It is a 26-character vector of uppercase letters from  A to Z. Set the names of `letter_no` to these 26 letters
3. Test yourself by calling `letter_no["B"]`, which should give you the number 2!
  
::: {.callout collapse=true}
## Solution to Challenge 5

```{r}
letter_no <- 1:26   # or seq(1,26)
names(letter_no) <- LETTERS
letter_no["B"]
```
:::
:::










### Removing named elements

If we try to remove one named element by negating the string, R complains::

```{r}
#| error: true
# define the vector x whose values are 5.4, 6.2, 7.1, 4.8, 7.5 with names a-e
x <- c(a = 5.4, b = 6.2, c = 7.1, d = 4.8, e = 7.5) 
# try to remove entry "a" using the -"a" indexing syntax
x[-"a"]
```


We will discuss more examples of indexing in the next lesson.
