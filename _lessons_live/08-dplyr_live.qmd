---
title: Data Frame Manipulation with dplyr
embed-resources: true
editor_options: 
  chunk_output_type: console
---


```{r}
#| message: false
library(tidyverse)
# load in gapminder
gapminder <- read.csv("data/gapminder_data.csv")
# look at the first 6 rows
head(gapminder)
# check the unique values of continent
unique(gapminder$continent)
```


Let's try to compute the average gdpPercap separately for each continent in the gapminder data:

```{r}
# compute the mean gdpPercap of Africa, Americas, Oceania, Europe, and Asia
# using base R and logical row indexing

```

Can we do this more neatly?










## The functions of `dplyr` package (part of the tidyverse)

0. Piping `|>`: Chain functions together

1. `select()`: Extract columns from a data frame

2. `filter()`: Subset the rows of a data frame using a logical condition

3. `mutate()`: Create new (or modify existing) columns in a data frame

4. `summarize()`: Compute summaries of the data in a data frame

5. `group_by()`: compute functions separately across different levels of a categorical variable.






## Installing and loading dplyr (via the tidyverse)

```{r}
#| message: false
# Install the tidyverse if you haven't already
# Load the tidyverse library

```









## Extracting columns using select()


Select allows us to select a subset of the columns of our data frame

```{r}
# Define `year_country_gdp` (year, country, and gdpPercap only) using select

# look at the head

```


Note the **lack of quotes** around the variables in select().





### Renaming variables using select()

```{r}
# Use select to rename `gdpPercap` to gdp_per_cap 

```






### Removing variables using select()


```{r}
# remove the continent variable from gapminder using select

```








## The pipe `|>`

Defining the pipe:

```{r}
head(gapminder)
# rewrite the above code using the pipe |>

```





### Using the pipe to chain together functions:

```{r}
head(select(gapminder, year))
# rewrite the above code using the pipe |>

```


Another example:

```{r}
mean(c(1, 5, 3))
# rewrite the above code using the pipe

```



### The two pipes: `|>` and `%>%`

```{r}
# Rewrite the above code using the old pipe %>%

```






::: {.callout}
## Challenge 1

Rewrite the following code using the pipe:

1. 

```{r}
#| eval: false
select(gapminder, -continent)
```

2. 

```{r}
#| eval: false
head(select(gapminder, life_exp = lifeExp, gdp_per_cap = gdpPercap))
```


:::




### Renaming columns: rename() vs select()



```{r}
# use the `rename()` function to rename gdpPercap to gdp_per_capita

```


How does this compare with `select()`?

```{r}
# Replace rename() with select() in the above example. 
# Predict the output

```








## Filtering to rows using filter()

Filter() allows us to subset the rows of our data frame using a logical condition. 

```{r}
# identify (using `$`) a logical condition for identifying which rows 
# correspond to Europe


# use filter (without the pipe) to filter to just the rows for Europe and 
# look at just the first 10 rows


# use filter (with the pipe) to filter to just the rows for Europe and
# look at just the first 10 rows

```






Let's use the pipe to chain together `select()` and `filter()`:

```{r}
# filter to the rows corresponding to Europe and then select just the 
# year, country, gdpPercap columns, and then view just the head

```

Can we switch the order of `filter()` and `select()` for this example?








### Filtering with Multiple conditions 

Two ways to provide multiple conditions with "and" (both must be true):

```{r}
# Filter to countries in Europe in 2007 using &

# Filter to countries in Europe in 2007 using a comma (),)

```


How would you provide multiple conditions with "or" (at least one must be true)?


```{r}
# Filter to United States or Canada in two different ways
# option 1:

# option 2:

```






::: {.callout}
## Challenge 2

Use piping to produce a data frame that contains the `lifeExp`, `country`
and `year` columns for African countries in 2002.  

Your data frame should have 52 rows and 3 columns (you can check this with `dim()`).

:::












## Adding and modifying columns using mutate()

You can add new columns using `mutate()`.

```{r}
# use mutate to define gdp_billion: gdpPercap * pop / 10^9 (and print the head)

```

You can also modify existing columns using `mutate()`.


```{r}
# use mutate to round lifeExp to the nearest integer (and print the head)

```









### Combining `mutate()` and `select()` with `transmute()`

Sometimes you want to both mutate and select at the same time. Rather than doing this in two separate steps, you can do it in one using `transmute()`. 

```{r}
gapminder |>
  mutate(gdp_billion = gdpPercap * pop / 10^9) |>
  select(country, year, gdp_billion) |>
  head()

# rewrite the above code using transmute

```







::: {.callout}
## Challenge 3

Explain what the following code is trying to do and explain why it doesn't work. Re-write the code so that it does work:

```{r}
#| error: true
gapminder |>
  filter(country == "Australia") |>
  select(year, lifeExp = round(lifeExp))
```


:::









## Creating summaries using summarize()

You can compute summaries using `summarize()`

```{r}
# compute the maximum life expectancy using summarize:

```

You can even compute multiple summaries at once, e.g., computing both the max and minimum of the lifeExp variable:

```{r}
# compute the min, mean, and max life expectancy using summarize:

```


```{r}
# compute the mean life expectancy and mean gdpPercap

```







## Grouped computations with group_by()

Recall the code at the beginning of the lesson:


```{r}
mean(gapminder[gapminder$continent == "Africa", "gdpPercap"])
mean(gapminder[gapminder$continent == "Americas", "gdpPercap"])
mean(gapminder[gapminder$continent == "Asia", "gdpPercap"])
mean(gapminder[gapminder$continent == "Oceania", "gdpPercap"])
mean(gapminder[gapminder$continent == "Europe", "gdpPercap"])
```

We can rewrite this code using `summarize()`

```{r}
# rewrite each line of the above code using summarize

```


The `group_by()` function offers a nice approach for grouped operations on a data frame:

```{r}
# rewrite the above code using group_by() and summarize() and ungroup afterwards

```






`group_by()` can be used with any dplyr function. For example with mutate:

```{r}
# use group_by() and mutate() to add a column containing the continent's 
# average life expectancy

```

Note that the output is a "tibble"





### Grouping by multiple variables


```{r}
# compute the mean GDP per capita for each *country-year combination*

```





::: {.callout}
## Challenge 4
Use `group_by()`, `summarize()`, and `filter()` to identify which country has the longest average life expectancy and which has the shortest average life expectancy.

Hint: The logical condition `x == min(x)` will return `TRUE` for the value of `x` that is smallest.

:::





## Ordering the rows in a data frame using arrange()


Another way to complete the previous challenge is to use `arrange()`:


```{r}
# Compute the average life expectancy for each country


# Arrange the result in order of mean life expectancy using arrange()


# Arrange in decreasing order:

```


What do you think will happen when we arrange using a character variable?

```{r}
# arrange the result above by `country`

```









## count() and n()


`n()` is a function that we can use in most dplyr functions to count the number of rows in a data frame (or group, if the data frame is grouped).

```{r} 
# use `group_by()` and `summarize()` with `n()` to count the number of times each
# continent occurs
# then arrange in decreasing order

```



We could alternatively do this using the shortcut `count()` function:

```{r}
# count the number of times each continent appears in the data using `count()`

```






::: {.callout}
## Advanced Challenge

Calculate the total GDP in billions (`gdpPercap * pop / 1e9`) for each continent in the year 2002 and in 2007. Which continent had the largest GDP in 2002? which had the smallest? What about in 2007?


:::


