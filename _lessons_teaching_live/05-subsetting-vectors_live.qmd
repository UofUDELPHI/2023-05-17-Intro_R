---
title: "Subsetting vectors"
output: html
embed-resources: true
editor_options: 
  chunk_output_type: console
---


## Subsetting vectors


We can extract individual elements of a vector by using the square bracket notation:

```{r}
# create a sequence_example vector of integers from 20 to 25

# extract the first element and store it in a variable called first_element

# take a look at the first_element variable

```

To change a single element, use the bracket on the other side of the arrow:

```{r}
# reassign the first element of sequence_example to 30

# print out sequence_example

```
 
 
 
 
 
 



### Accessing elements using their indices

Define a new vector, `x`:

```{r}
# define a vector x containing the values 5.4, 6.2, 7.1, 4.8, and 7.5

# print out x

```



To extract elements of a vector we can give their corresponding index:

```{r}
# extract the first entry of x

```

```{r}
# extract the fourth entry of x

```





### Extracting multiple elements at once

We can ask for multiple elements at once by providing a *vector* of indices:

```{r}
# extract the first and third element of x using a vector created with `c()`

```






Or "slices" of the vector using a sequential integer vector index:

```{r}
# extract the first to fourth element of x using a vector created with `:`

```





You can ask for the same element multiple times:

```{r}
# extract the first, first and third element from x using `c()`

```



### Indexing out of bounds

If you ask for an index beyond the length of the vector, R will return a missing value:

```{r}
# extract the non-existent sixth element from x

```







If you ask for the 0th element, you get an empty vector:

```{r}
# extract the 0th element from x

```






### Skipping and removing elements

If you use a negative number as the index of a vector, R will return every element *except* for the one specified:

```{r}
# remove the second entry from x

```

We can skip multiple elements:

```{r}
# remove the first and fifth elements from x in two ways:

```






### Order of operations


It's natural to try to negate a sequence like `-1:3` (this should give an error):

```{r}
#| error: true
# Try to remove the 1st-3rd elements from x using `:`

```


Why didn't this work?


```{r}
# print out the sequence of integers being used for indexing

```




The correct solution is to wrap `1:3` in brackets, so that the `-` operator applies to the result:

```{r}
# correctly remove elements 1-3 using parentheses

```







Above, we have only *printed* the results to the console. 

To redefine `x`, we need to re-assign the variable to our result:

```{r}
# redefine x as x without the 4th element

# print x

```

::: {.callout}
## Challenge 1

Given the following vector:
```{r}
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
x
```

Come up with at least 2 different commands that will produce the following output:

```{verbatim}
[1] 6.2 7.1 4.8
```


After you find 2 different commands, compare notes with your neighbor. Did you have different strategies?

:::



::: {.callout}
## Challenge 2

Start by making a vector with the numbers 5 through 26. Then:

- Print out the first three entries of the vector

- Print out the fourth entry of the vector

- Multiply the vector by 2.

:::













## Names

Each element of a vector can be given a name:

```{r}
# define a named pizza_price vector 

# look at the result

```




Alternatively, these names can be assigned after defining the vector:

```{r}
# define unnamed pizza price vector

# assign the names to pizza price

# look at the result

```









### Accessing vectors by name


To retrieve a named entry from a vector:

```{r}
# extract the "pizzasubito" entry from pizza_price using named indexing

```

This is equivalent to extracting the first entry of the vector:

```{r}
# extract the first entry from pizza_price using numbered indexing

```







If you want to extract just the names of an object, use the `names()` function:

```{r}
# use `names()` to print the names of pizza_price

```








We have seen how to access and change single elements of a vector. The same is
possible for names:

```{r}
# print the third pizza_price name

# change this third name of pizza_price to "call-a-pizza"

# print out the new pizza_price vector

```



::: {.callout}
## Challenge 3

Define the following vector, `y`, and extract the "a" and "c" entries from it:

```{verbatim}
  a   b   c   d   e 
5.4 6.2 7.1 4.8 7.5 
```



:::




::: {.callout}
## Challenge 4

What is the data type of the *names* of `pizza_price`? 

:::




::: {.callout}

## Challenge 5

Instead of just changing the names of each element of a vector individually, you can
also set all names of an object by writing code like (replace <ALL CAPS> text):

```{r}
#| eval: false
names(OBJECT) <-  CHARACTER_VECTOR
```

Create a vector that gives the number for each letter in the alphabet!

1. Generate a vector called `letter_no` with the sequence of numbers from 1 to 26
2. R has a built-in object called `LETTERS` (type `LETTERS` in the console. It is a 26-character vector of uppercase letters from  A to Z. Set the names of `letter_no` to these 26 letters
3. Test yourself by calling `letter_no["B"]`, which should give you the number 2!
  
:::










### Removing named elements

If we try to remove one named element by negating the string, R complains::

```{r}
#| error: true
# define the vector x whose values are 5.4, 6.2, 7.1, 4.8, 7.5 with names a-e

# try to remove entry "a" using the -"a" indexing syntax

```









We can use the `!=` (not-equals) operator to perform logical indexing

```{r}
# compute a logical vector of whether each name is *not* equal to "a"

# use the logical vector to remove entry "a"

```




### Skipping multiple named indices

Skipping multiple named indices is a little bit harder still. Suppose we want to drop the `"a"` and `"c"` elements, so we try this:

```{r}
# try to remove the "a" and "c" elements of x as above (using !=)

```

What went wrong?

#### Recycling

Let's take a look at the indexing component of this code:

```{r}
names(x) != c("a", "c")
```

Why does R give `TRUE` as the third element of this vector?

When one vector is shorter than the other, it gets *recycled*: R **repeats** `c("a", "c")` as many times as necessary to match `names(x)`: i.e., `c("a","c","a","c","a")`. 


Since the recycled `"a"` doesn't match the third element of `names(x)`, the value of `!=` is `TRUE`.

If we had been unlucky and `names(x)` had contained six elements, R would *silently* have done the wrong thing (i.e., not what we intended it to do). This recycling rule can can introduce hard-to-find and subtle bugs!




#### The %in% operator

Rather than `==` for comparing multiple options, you should use the `%in%` operator. 

```{r}
# use %in% to create a logical vector of whether the names of x are "a" or "c"

```


```{r}
# use this logical vector to *remove* the elements "a" and "c" from x

```


