---
title: Lists
embed-resources: true
editor_options: 
  chunk_output_type: console
---



## Lists

It's time to introduce another data structure: the *list*.

The elements of a list can have different data types. For example:

```{r}
# create a list called list_example containing 1, "a", and TRUE

```








The "length" of a list corresponds to how many entries it contains:

```{r}
# compute the length of list_example

```











The elements of lists can have **names** and be any object:

```{r}
cats <- data.frame(coat = c("calico", "black", "tabby"),
                   weight = c(2.1, 5.0, 3.2),
                   likes_string = c(1, 0, 1),
                   stringsAsFactors = FALSE)
cats
```

```{r}
# define a complicated_list that contains 
#  - a numeric vector c(1, 2, 9), 
#  - the cats data frame, and 
#  - a single character value "a"

```








::: {.callout}
## Challenge 1
Create a list of length two containing a (1) character vector containing the letters "x", "y", "z" and (2) a data frame with two columns that looks like:

```{verbatim}
    name grade
   Henry     A
  Hannah     B
  Harvey     C
```

:::














### List subsetting


```{r}
xlist <- list(a = "Software Carpentry", b = 1:10, data = head(mtcars))
xlist
```



To *subset* a list use single brackets `[ ]` (the output will be a list):

```{r}
# subset to the second element of xlist 

```

```{r}
# subset to the first two elements of xlist

```





### Extracting list elements using `[[ ]]`

To *extract* individual elements of a list, you need double-square brackets `[[ ]]`.

```{r}
# extract the first element of xlist

```



You can use names to both subset and extract elements:

```{r}
# extract the entry named "a":

```





### Limitations of `[[ ]]`

You can't extract more than one element at once using `[[ ]]`:

```{r, error=TRUE}
# try to extract the first two elements using `[[ ]]`

```

Nor use it to skip elements:

```{r, error=TRUE}
# try to remove the first element using `[[ ]]`

```







### Extracting elements using `$`


The `$` function is a shorthand way for extracting elements by name:

```{r}
# extract the element a from xlist using `$`

```








::: {.callout}
## Challenge 2

Given the following list:

```{r}
xlist <- list(a = "Software Carpentry", b = 1:10, data = head(mtcars))
xlist
```

Extract the second entry in the second element of the list (i.e., extract the number `2` from the `b` entry from xlist`). 

There are several ways to do this. Compare your answer with your neighbor. Did you do it the same way?

:::












### Data frames as a special case of a list


It turns out that a data frame is a special kind of a list. Specifically, *a data frame is a list of vectors of the same length*. 

This is why you can extract vector columns from a data frame using the double brackets notation:

```{r}
cats
```

```{r}
# use the $ notation to extract the coat vector

# use the `[[ ]]` notation to extract the coat vector

```


Note that the `df[i, j]` index notation is specific to data frames (and does not work for lists).

```{r}
# extract the entry in cats in the first row and second column:

```

```{r}
#| error: true

# Try to subset xlist using [ , ]

```

