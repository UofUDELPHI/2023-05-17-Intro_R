---
title: Iteration with for loops and map functions
embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
gapminder <- read.csv("data/gapminder_data.csv")
```


## "For" loops for repeating operations


The basic structure of a `for()` loop is:

```{r}
#| eval = FALSE
for (iterator in set of values) {
  do a thing
}
```

For example:

```{r}
# write a for loop that prints out the values from 1 to 10

```




```{r}
# write a for loop that prints the value of (1 + x)^{10} for 1:10

```




To save the output of a computation in a vector, you need to first initialize an empty vector and sequentially add values to it:

```{r}
# Write a for loop that saves the results of (1 + x)^{10} for 1:10 in a vector 
# called "result"

```









## Map() functions

`map()` functions come from the purrr R package (now a part of the tidyverse). 


The `map()` function has two primary arguments:

1. The object whose elements we want to iterate over. 

2. The function that we want to apply at each iteration. 

The output of `map()` is always a *list*.


```{r}
# use `map()` to apply `exp()` to the values in 1:10

```











### Alternative map output types

If you want your output to be a **numeric "double" vector**, you can use `map_dbl()`:

```{r}
# use `map()` to apply `exp()` to the values in 1:10 and output a numeric vector

```












Q: What will `map()` iterate over when provided a data frame?











If you want the output to be a character vector, you can use `map_chr()`.

```{r}
# use `map_chr()` to apply `class()` to the columns of the gapminder dataset

```








Why does the following code return an error:

```{r}
#| error: true
map_dbl(1:10, class)
```












### Anonymous functions in `map()`

You can provide custom functions to `map()` functions:

```{r}
power_fun <- function(x) {
  (x + 1)^10
}
# Use `map_???` to apply power_fun to the values `1:10`

```







A one-line shorthand version:

```{r}
# Use an anonymous function to apply power_fun to the values `1:10` 

```















The `map_df()` function will return a data frame (but requires that the function being applied outputs a data frame).


```{r}
# Use `map_df()` and an anonymous function to compute the square and power_fun 
# to the values `1:10`  and return a data frame

```




To help see how this works, set `x` to be one of the values in the vector and run the body of the code:

```{r}
# manually compute the body of the above function for the first element of 1:10

```







A gapminder example: mean and sd


```{r}
# select pop, gdpPercap, and lifeExp from gapminder and 
# compute the mean and sd of each column and return them in a data frame
# using map_df()

```



To figure out what is happening here:

```{r}
# show what the body of the above map function is doing for `gapminder$pop`

```










::: {.callout}
## Challenge 1

For each column in the gapminder dataset, compute the number of unique entries using the `n_distinct()` function. Make sure the output of your code is a numeric vector.

Do this in two different ways: using a `for` loop and a `map_dbl()` function.

Hint: `n_distinct()` is a dplyr function which counts the number of unique/distinct values in a vector. Try `n_distinct(c(1, 1, 4, 4, 4, 4, 1, 3))` as an example of its usage



:::






::: {.callout}
## Challenge 2

Use `map_df()` to compute the number of distinct values and the class of each variable in the gapminder dataset and store them in a data frame.

The output of your code should look like this:

```{verbatim}
   variable n_distinct     class
1   country        142 character
2      year         12   integer
3       pop       1704   numeric
4 continent          5 character
5   lifeExp       1626   numeric
6 gdpPercap       1704   numeric
```

Hint: the argument `.id = "variable"` variable of `map_df()` can be used to add the `variable` column automatically based on the gapminder column names.


:::




